using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using WebSocketSharp;
using static VTSIntegration.VTSConfig;

namespace VTSIntegration
{
    internal class VTSApi
    {
        public const string vtsPluginID = "RoR2-VTSIntegration";
        public const string vtsPluginAuthor = "doomy64";
        public const string vtsPluginIcon = "";
        public const int API_ERROR_AUTH_FAILED = 50;
        public const int API_ERROR_ITEM_ORDER_TAKEN = 756;
        public const int ITEM_ORDER_MIN = -30;

        private static Dictionary<string, object> baseInfo = new Dictionary<string, object> {
                { "apiName", "VTubeStudioPublicAPI" },
                { "apiVersion", "1.0" },
                { "requestID", "RoR2-VTSIntegration"}
        };
        public static Dictionary<string, string> loadedItems = new Dictionary<string, string>();
        public static Dictionary<string, string> cachedItems = new Dictionary<string, string>();
        public static string lastItemLocked = string.Empty;
        public static string itemToReplace = string.Empty;
        public static Dictionary<string, Action<Dictionary<string, object>, string>> responseHandlers = new Dictionary<string, Action<Dictionary<string, object>, string>>();
        public static bool connected = false;
        public static float lastModelSize = 0.0f;
        public static List<int> availableOrdersFront = new List<int>();
        public static List<int> availableOrdersBack = new List<int>();
        public static List<string> itemsWaitingForSpace = new List<string>();
        public static List<string> itemsWaitingToAdd = new List<string>();
        public static List<string> itemsBeingMoved = new List<string>();
        public static List<string> ignoredResponses;
        private static WebSocket socket;
        
        public static void Init()
        {
            socket = new WebSocket(address.Value);
            Connect();
        }

        private static void Connect()
        {
            responseHandlers.Add("AuthenticationTokenResponse", Handler_AuthTokenResponse);
            responseHandlers.Add("AuthenticationResponse", Handler_AuthResponse);
            responseHandlers.Add("APIStateResponse", Handler_APIStateResponse);
            responseHandlers.Add("PermissionResponse", Handler_PermissionResponse);
            responseHandlers.Add("ItemEvent", Handler_ItemEvent);
            responseHandlers.Add("ItemLoadResponse", Handler_ItemLoadResponse);
            responseHandlers.Add("ItemListResponse", Handler_ItemListResponse);
            responseHandlers.Add("ItemMoveResponse", Handler_ItemMoveResponse);
            responseHandlers.Add("ItemPinResponse", Handler_ItemPinResponse);
            responseHandlers.Add("ModelClickedEvent", Handler_ModelClickedEvent);
            responseHandlers.Add("APIError", Handler_APIError);
            ignoredResponses = new List<string>
            {
                "ItemUnloadResponse",
                "EventSubscriptionResponse",
            };

            socket.Connect();
            socket.OnMessage += (sender, e) =>
            {
                HandleResponse(e.Data);
            };
            SendRequest("APIStateRequest");
        }

        public static void OnApiConnected()
        {
            connected = true;
            if(authToken.Value == "null")
            {
                GenerateAuthToken();
            }
            else
            {
                Authenticate();
            }
        }
        public static void OnAuthenticated()
        {
            SendRequest("PermissionRequest", new Dictionary<string, object> { { "requestedPermission", "LoadCustomImagesAsItems" } });
            SendRequest("EventSubscriptionRequest", new Dictionary<string, object>
            {
                {"eventName", "ModelClickedEvent" },
                {"subscribe", true },
                {"config", new Dictionary<string, object> { { "onlyClicksOnModel", true } } }
            });
            SendRequest("EventSubscriptionRequest", new Dictionary<string, object>
            {
                {"eventName", "ItemEvent" },
                {"subscribe", true },
                {"config", new Dictionary<string, object> { } }
            });
            SendRequest("ItemListRequest", new Dictionary<string, object>
            {
                { "includeAvailableSpots", true },
                { "includeAvailableItemFiles", false },
                { "includeItemInstancesInScene", false }
            });
        }

        public static void SendRequest(string messageType, string requestID = null)
        {
            Dictionary<string, object> content = new Dictionary<string, object> { { "messageType", messageType } };
            SendRequest(content, requestID);
        }

        public static void SendRequest(string messageType, Dictionary<string, object> data, string requestID = null)
        {
            Dictionary<string, object> dict = new Dictionary<string, object>
            {
                {"messageType", messageType },
                {"data", data}
            };
            SendRequest(dict, requestID);
        }

        public static void SendRequest(Dictionary<string, object> content, string requestID = null)
        {
            Dictionary<string, object>[] dicts = { baseInfo, content };
            Dictionary<string, object> dict = Merge(dicts);
            if (requestID != null)
            {
                dict.Remove("requestID");
                dict.Add("requestID", requestID);
            }
            string encoded = JsonConvert.SerializeObject(dict);
            socket.SendAsync(encoded, default);
        }

        public static void HandleResponse(string body)
        {
            Dictionary<string, object> result = JsonConvert.DeserializeObject<Dictionary<string, object>>(body);
            string messageType = result["messageType"].ToString();
            Dictionary<string, object> data = JsonConvert.DeserializeObject<Dictionary<string, object>>(result["data"].ToString());
            if(responseHandlers.ContainsKey(messageType))
            {
                responseHandlers[messageType].Invoke(data, result["requestID"].ToString());
            }
            else if (!ignoredResponses.Contains(messageType))
            {
                Log.Warning("Received unhandled response type: " + messageType);
            }
        }

        private static void Handler_PermissionResponse(Dictionary<string, object> data, string requestID)
        {
            //TODO Permission was denied
        }

        public static void Handler_APIStateResponse(Dictionary<string, object> data, string requestID)
        {
            if (data["active"].Equals(false))
            {
                //TODO Retry later???
                Log.Error("VTS Responded, but API is not active. Check your settings and restart your game");
                return;
            }
            OnApiConnected();
        }

        public static void Handler_AuthTokenResponse(Dictionary<string, object> data, string requestID)
        {
            authToken.Value = data["authenticationToken"].ToString();
            Authenticate();
        }

        public static void Handler_AuthResponse(Dictionary<string, object> data, string requestID)
        {
            if (data["authenticated"].Equals(false))
            {
                Log.Warning("Authentication token is invalid, regenerating");
                GenerateAuthToken();
            }
            else
            {
                OnAuthenticated();
            }
        }

        public static void Handler_ItemLoadResponse(Dictionary<string, object> data, string requestID)
        {
            string item = requestID;
            item = item.Substring(item.IndexOf("|") + 1);
            string instanceID = data["instanceID"].ToString();
            string fileName = data["fileName"].ToString();
            if (!cachedItems.ContainsKey(item))
            {
                cachedItems.Add(item, fileName);
            }
            LinkItem(item, instanceID);
        }

        public static void Handler_ItemEvent(Dictionary<string, object> data, string requestID)
        {
            string eventType = data["itemEventType"].ToString();
            string instance = data["itemInstanceID"].ToString();
            if (itemsBeingMoved.Contains(instance))
                return;

            if (loadedItems.ContainsKey(instance))
            {
                string item = loadedItems[instance];
                if (eventType.Equals("DroppedUnpinned") || eventType.Equals("DroppedPinned") || eventType.Equals("Clicked"))
                {
                    Dictionary<string, float> itemPos = JsonConvert.DeserializeObject<Dictionary<string, float>>(data["itemPosition"].ToString());
                    Vector2 position = new Vector2(itemPos["x"], itemPos["y"]);
                    itemConfig[item].position.Value = position;
                    if (eventType.Equals("DroppedUnpinned"))
                    {
                        itemConfig[item].SetPinData(PinData.Null());
                    }
                    SendRequest("ItemListRequest", new Dictionary<string, object>
                    {
                        { "includeAvailableSpots", true },
                        { "includeAvailableItemFiles", false },
                        { "includeItemInstancesInScene", true },
                        { "onlyItemsWithInstanceID", instance }
                    });
                }
                else if (eventType.Equals("Removed"))
                {
                    loadedItems.Remove(item);
                    loadedItems.Remove(instance);
                    blockedItems.Add(item);
                }
                else if (eventType.Equals("Locked"))
                {
                    lastItemLocked = instance;
                }
                else if (eventType.Equals("Unlocked") && instance.Equals(lastItemLocked))
                {
                    lastItemLocked = string.Empty;
                }
            }
            if (eventType.Equals("Added") && !itemToReplace.Equals(string.Empty))
            {
                itemConfig[itemToReplace].imageOverride.Value = data["itemFileName"].ToString();
                if (loadedItems.ContainsKey(itemToReplace))
                {
                    UnloadItem(itemToReplace);
                    LoadItem(itemToReplace);
                }
                itemToReplace = string.Empty;
                SendRequest("ItemUnloadRequest", new Dictionary<string, object>
                {
                    { "unloadAllInScene", false },
                    { "unloadAllLoadedByThisPlugin", false },
                    { "allowUnloadingItemsLoadedByUserOrOtherPlugins", true },
                    { "instanceIDs", new List<string>{ instance } }
                });
            }
            SendRequest("ItemListRequest", new Dictionary<string, object>
            {
                { "includeAvailableSpots", true },
                { "includeAvailableItemFiles", false },
                { "includeItemInstancesInScene", false },
                { "onlyItemsWithInstanceID", instance }
            });
        }

        public static void Handler_ItemListResponse(Dictionary<string, object> data, string requestID)
        {
            if (data["availableSpots"].GetType() == typeof(JArray))
            {
                availableOrdersFront.Clear();
                availableOrdersBack.Clear();
                List<int> orders = ((JArray)data["availableSpots"]).ToObject<List<int>>();
                orders.ForEach((n) =>
                {
                    if (n > 0)
                    {
                        availableOrdersFront.Add(n);
                    }
                    else
                    {
                        availableOrdersBack.Add(n);
                    }
                });
            }
            List<Dictionary<string, object>> items = JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(data["itemInstancesInScene"].ToString());
            foreach (Dictionary<string, object> item in items)
            {
                //Why do I have to do an item list JUST to get the goddamn flipped status????
                string itemDef = loadedItems[item["instanceID"].ToString()];
                flippedItems.Set(itemDef, item["flipped"].Equals(true));
            }
            CheckForItemSpace();
        }

        private static void Handler_ItemPinResponse(Dictionary<string, object> data, string requestID)
        {
            if (requestID.Equals(baseInfo["requestID"]))
                return;

            List<string> moveData = new List<string>();
            moveData.AddRange(requestID.Split("|"));
            string name = moveData[0];
            Vector2 position = new Vector2(float.Parse(moveData[1]), float.Parse(moveData[2]));
            int rotation = int.Parse(moveData[3]);
            float size = float.Parse(moveData[4]);
            int order = int.Parse(moveData[5]);
            MoveItem(name, position, rotation, size, order, false);
        }

        private static void Handler_ItemMoveResponse(Dictionary<string, object> data, string requestID)
        {
            List<Dictionary<string, object>> items = JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(data["movedItems"].ToString());
            foreach (Dictionary<string, object> item in items)
            {
                string instanceID = item["itemInstanceID"].ToString();
                if (!loadedItems.ContainsKey(instanceID))
                    continue;

                string name = loadedItems[instanceID];
                ItemConfig config = itemConfig[name];
                PinData pinData = config.GetPinData();
                if (pinData.model != "null")
                {
                    SendRequest("ItemPinRequest", new Dictionary<string, object>
                    {
                        { "pin", true },
                        { "itemInstanceID", instanceID },
                        { "angleRelativeTo", "RelativeToModel" },
                        { "sizeRelativeTo", "RelativeToCurrentItemSize" },
                        { "vertexPinType", "Provided" },
                        { "pinInfo", new Dictionary<string, object>
                        {
                            { "modelID", pinData.model },
                            { "artMeshID", pinData.mesh },
                            { "angle", itemConfig[name].rotation.Value },
                            { "size", 0.0f },
                            { "vertexID1", pinData.vertexIDs[0] },
                            { "vertexID2", pinData.vertexIDs[1] },
                            { "vertexID3", pinData.vertexIDs[2] },
                            { "vertexWeight1", pinData.vertexWeights[0] },
                            { "vertexWeight2", pinData.vertexWeights[1] },
                            { "vertexWeight3", pinData.vertexWeights[2] }
                        }
                        }
                    });
                }
                itemsBeingMoved.Remove(instanceID);
            }
        }
        public static void Handler_ModelClickedEvent(Dictionary<string, object> data, string requestID)
        {
            if (lastItemLocked == string.Empty)
                return;

            if (!loadedItems.ContainsKey(lastItemLocked))
            {
                lastItemLocked = string.Empty;
                return;
            }
            string item = loadedItems[lastItemLocked];
            int meshCount = int.Parse(data["clickedArtMeshCount"].ToString());
            if (meshCount > 0)
            {
                List<Dictionary<string, object>> meshes = JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(data["artMeshHits"].ToString());
                foreach (Dictionary<string, object> mesh in meshes)
                {
                    Dictionary<string, object> hitInfo = JsonConvert.DeserializeObject<Dictionary<string, object>>(mesh["hitInfo"].ToString());
                    int meshOrder = int.Parse(mesh["artMeshOrder"].ToString());
                    if (meshOrder == 0)
                    {
                        PinData pinData = new PinData();
                        List<int> vertexIDs = new List<int> {
                                int.Parse(hitInfo["vertexID1"].ToString()),
                                int.Parse(hitInfo["vertexID2"].ToString()),
                                int.Parse(hitInfo["vertexID3"].ToString())
                            };
                        List<float> vertexWeights = new List<float>
                            {
                                float.Parse(hitInfo["vertexWeight1"].ToString()),
                                float.Parse(hitInfo["vertexWeight2"].ToString()),
                                float.Parse(hitInfo["vertexWeight3"].ToString())
                            };

                        pinData.model = hitInfo["modelID"].ToString();
                        pinData.mesh = hitInfo["artMeshID"].ToString();
                        pinData.vertexIDs = vertexIDs;
                        pinData.vertexWeights = vertexWeights;
                        itemConfig[item].SetPinData(pinData);
                        SendRequest("ItemPinRequest", new Dictionary<string, object>
                            {
                                { "pin", true },
                                { "itemInstanceID", lastItemLocked },
                                { "angleRelativeTo", "RelativeToModel" },
                                { "sizeRelativeTo", "RelativeToCurrentItemSize" },
                                { "vertexPinType", "Provided" },
                                { "pinInfo", new Dictionary<string, object>
                                {
                                    { "modelID", pinData.model },
                                    { "artMeshID", pinData.mesh },
                                    { "angle", itemConfig[item].rotation.Value },
                                    { "size", 0.0f },
                                    { "vertexID1", pinData.vertexIDs[0] },
                                    { "vertexID2", pinData.vertexIDs[1] },
                                    { "vertexID3", pinData.vertexIDs[2] },
                                    { "vertexWeight1", pinData.vertexWeights[0] },
                                    { "vertexWeight2", pinData.vertexWeights[1] },
                                    { "vertexWeight3", pinData.vertexWeights[2] }
                                }
                                }
                            });
                        lastItemLocked = string.Empty;
                        break;
                    }
                }
            }
        }

        public static void Handler_APIError(Dictionary<string, object> data, string requestID)
        {
            int errorID = int.Parse(data["errorID"].ToString());
            switch (errorID)
            {
                case API_ERROR_AUTH_FAILED:
                {
                    Log.Error("Authentication was denied in VTS");
                    break;
                }
                case API_ERROR_ITEM_ORDER_TAKEN:
                {
                    string item = requestID;
                    item = item.Substring(item.IndexOf("|") + 1);
                    itemsWaitingForSpace.Add(item);
                    SendRequest("ItemListRequest", new Dictionary<string, object>
                    {
                        { "includeAvailableSpots", true },
                        { "includeAvailableItemFiles", false },
                        { "includeItemInstancesInScene", false }
                    });
                    break;
                }
                default:
                {
                    Log.Error("VTS returned API error: " + data["message"].ToString());
                    break;
                }
            }
        }
        public static void LoadItem(string name, Texture2D icon = null)
        {
            if(loadedItems.ContainsKey(name))
            {
                Log.Error(string.Format("Attempted to load item {0} while it was already loaded", name));
                return;
            }
            Log.Debug("Loading item: " + name);
            string image = "";
            string fileName;
            ItemConfig config = itemConfig[name];
            string fileOverride = config.imageOverride.Value;
            int order = ClaimOrder(name);
            if (order < ITEM_ORDER_MIN)
            {
                itemsWaitingForSpace.Add(name);
                return;
            }

            if (fileOverride != "null")
            {
                fileName = fileOverride;
            }
            else if (cachedItems.ContainsKey(name))
            {
                fileName = cachedItems[name];
            }
            else
            {
                if(icon == null)
                {
                    Log.Error(string.Format("Attempted to load item {0} without specifying an image", name));
                    return;
                }
                image = Convert.ToBase64String(DeCompress(icon).EncodeToPNG());
                fileName = name + ".png";
                if (fileName.Length < 8)
                {
                    fileName = fileName.PadLeft(8, '0');
                }
                if (fileName.Length > 32)
                {
                    fileName = fileName.Substring(fileName.Length - 32);
                }
            }
            SendRequest("ItemLoadRequest", new Dictionary<string, object>
            {
                { "fileName", fileName },
                { "positionX", config.position.Value.x },
                { "positionY", config.position.Value.y },
                { "size", config.size.Value },
                { "rotation", config.rotation.Value },
                { "fadeTime", 0.0 },
                { "order", order },
                { "failIfOrderTaken", true },
                { "smoothing", 0 },
                { "censored", false },
                { "flipped", flippedItems.Contains(name) },
                { "locked", false },
                { "unloadWhenPluginDisconnects", true },
                { "customDataBase64", image },
                { "customDataAskUserFirst", false },
                { "customDataSkipAskingUserIfWhitelisted", false },
                { "customDataAskTimer", -1 }
            }, "ItemLoad|" + name);
        }

        public static void UnloadItem(string name)
        {
            if (loadedItems.ContainsKey(name))
            {
                string instance = loadedItems[name];
                loadedItems.Remove(name);
                loadedItems.Remove(instance);
                SendRequest("ItemUnloadRequest", new Dictionary<string, object>
                {
                    {"unloadAllInScene", false },
                    {"unloadAllLoadedByThisPlugin", false },
                    {"allowUnloadingItemsLoadedByUserOrOtherPlugins", false },
                    {"instanceIDs", new List<string> { instance } }
                }, "ItemUnload|" + name);

            }
        }

        public static void Authenticate()
        {
            SendRequest("AuthenticationRequest", new Dictionary<string, object>
            {
                {"pluginName", vtsPluginID},
                {"pluginDeveloper", vtsPluginAuthor },
                {"authenticationToken", authToken.Value}
            });
        }

        public static void MoveItem(string name, Vector2 position, int rotation = -1000, float size = -1000.0f, int order = -1000, bool unpinIfPinned = true)
        {
            if (loadedItems.ContainsKey(name))
            {
                string instance = loadedItems[name];
                itemsBeingMoved.Add(instance);
                if (unpinIfPinned && !itemConfig[name].GetPinData().model.Equals("null"))
                {
                    SendRequest("ItemPinRequest", new Dictionary<string, object>
                    {
                        { "pin", false },
                        { "itemInstanceID", instance }
                    }, string.Format("{0}|{1}|{2}|{3}|{4}|{5}", name, position.x, position.y, rotation, size, order));
                }
                else
                {
                    SendRequest("ItemMoveRequest", new Dictionary<string, object>
                    {
                        {"itemsToMove" , new List<Dictionary<string,object>>{ new Dictionary<string, object>
                        {
                            { "itemInstanceID", instance},
                            { "timeInSeconds", 0 },
                            { "fadeMode", "zip" },
                            { "positionX", position.x },
                            { "positionY", position.y },
                            { "order", order },
                            { "size", size },
                            { "rotation", rotation },
                            { "setFlip", false },
                            { "flip", false },
                            { "userCanStop", false }

                        } } }
                    });
                }
            }
        }

        public static void GenerateAuthToken()
        {
            SendRequest("AuthenticationTokenRequest", new Dictionary<string, object>
            {
                {"pluginName", vtsPluginID},
                {"pluginDeveloper", vtsPluginAuthor },
                {"pluginIcon", vtsPluginIcon }
            });
        }
        public static int ClaimOrder(string name)
        {
            List<int> orderList = backgroundItems.Contains(name) ? availableOrdersBack : availableOrdersFront;
            if (orderList.Count <= 0)
                return ITEM_ORDER_MIN - 1;

            int order = orderList[0];
            orderList.RemoveAt(0);
            return order;
        }

        public static bool OrderAvailable(string name)
        {
            List<int> orderList = backgroundItems.Contains(name) ? availableOrdersBack : availableOrdersFront;
            return orderList.Count > 0;
        }

        private static void CheckForItemSpace()
        {
            List<string> itemsToTry = new List<string>(itemsWaitingForSpace);
            List<string> itemsRemoved = new List<string>();
            itemsToTry.ForEach((name) =>
            {
                if (OrderAvailable(name))
                {
                    itemsWaitingToAdd.Add(name);
                    itemsRemoved.Add(name);
                }
            });
            itemsRemoved.ForEach((name) =>
            {
                itemsWaitingForSpace.Remove(name);
            });
        }

        public static void LinkItem(string item, string instanceID)
        {
            loadedItems.Add(instanceID, item);
            loadedItems.Add(item, instanceID);
            ItemConfig config = itemConfig[item];
            PinData pinData = config.GetPinData();
            if (pinData.model != "null")
            {
                SendRequest("ItemPinRequest", new Dictionary<string, object>
                {
                    { "pin", true },
                    { "itemInstanceID", instanceID },
                    { "angleRelativeTo", "RelativeToModel" },
                    { "sizeRelativeTo", "RelativeToCurrentItemSize" },
                    { "vertexPinType", "Provided" },
                    { "pinInfo", new Dictionary<string, object>
                    {
                        { "modelID", pinData.model },
                        { "artMeshID", pinData.mesh },
                        { "angle", itemConfig[item].rotation.Value },
                        { "size", 0.0f },
                        { "vertexID1", pinData.vertexIDs[0] },
                        { "vertexID2", pinData.vertexIDs[1] },
                        { "vertexID3", pinData.vertexIDs[2] },
                        { "vertexWeight1", pinData.vertexWeights[0] },
                        { "vertexWeight2", pinData.vertexWeights[1] },
                        { "vertexWeight3", pinData.vertexWeights[2] }
                    }
                    }
                });
            }
            else
            {
                MoveItem(item, config.position.Value, config.rotation.Value, config.size.Value);
            }
        }

        public static Dictionary<TKey, TValue> Merge<TKey, TValue>(Dictionary<TKey, TValue>[] dictionaries)
        {
            return dictionaries.SelectMany(dict => dict).ToDictionary(pair => pair.Key, pair => pair.Value);
        }

        public static Texture2D DeCompress(Texture2D source)
        {
            RenderTexture renderTex = RenderTexture.GetTemporary(
                        source.width,
                        source.height,
                        0,
                        RenderTextureFormat.Default,
                        RenderTextureReadWrite.Linear);

            Graphics.Blit(source, renderTex);
            RenderTexture previous = RenderTexture.active;
            RenderTexture.active = renderTex;
            Texture2D readableText = new Texture2D(source.width, source.height);
            readableText.ReadPixels(new Rect(0, 0, renderTex.width, renderTex.height), 0, 0);
            readableText.Apply();
            RenderTexture.active = previous;
            RenderTexture.ReleaseTemporary(renderTex);
            BrightnessContrast(readableText, VTSConfig.brightness.Value, VTSConfig.contrast.Value, VTSConfig.gamma.Value);
            return readableText;
        }

        public static float AdjustChannel(float colour,
           float brightness, float contrast, float gamma)
        {
            return Mathf.Pow(colour, gamma) * contrast + brightness;
        }

        public static Texture2D BrightnessContrast(Texture2D tex,
                   float brightness = 1f, float contrast = 1f, float gamma = 1f)
        {
            float adjustedBrightness = brightness - 1.0f;

            Color[] pixels = tex.GetPixels();

            for (int i = 0; i < pixels.Length; i++)
            {
                var p = pixels[i];
                p.r = AdjustChannel(p.r, adjustedBrightness, contrast, gamma);
                p.g = AdjustChannel(p.g, adjustedBrightness, contrast, gamma);
                p.b = AdjustChannel(p.b, adjustedBrightness, contrast, gamma);
                pixels[i] = p;
            }

            tex.SetPixels(pixels);
            tex.Apply();

            return tex;
        }

    }
}
